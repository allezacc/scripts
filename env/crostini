# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2019 Nathan Chancellor
#
# Utility and terminal setup functions for crostini on my Pixelbook


# Setup function
function bootstrap() {(
    # Grab common functions/variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null
    source <(curl -ls https://github.com/nathanchance/scripts/raw/master/constants/versions) &>/dev/null

    # Make sure keys are present
    local CROSTINI; CROSTINI=${HOME}/Crostini
    [[ ! -d ${CROSTINI} ]] && die "${CROSTINI} not found!"

    # Set architecture variables
    case "$(uname -m)" in
        "aarch64") ARCH=arm64 ;;
        "x86_64") ARCH=amd64 ;;
        *) display_error "Unsupported architecture!"; return 1 ;;
    esac

    # Ensure that packages are all up to date
    sudo apt update
    sudo apt upgrade -y

    # Make sure timezone is correct
    sudo bash -c 'echo "America/Phoenix" > /etc/timezone'
    sudo dpkg-reconfigure -f noninteractive tzdata

    # Install packages from Debian repos
    sudo apt install -y --no-install-recommends \
        build-essential \
        bc \
        bison \
        devscripts \
        flex \
        git \
        gpg \
        jq \
        libssl-dev \
        mosh \
        most \
        openvpn \
        python-pip \
        ssh \
        tmux \
        vim

    # Install speedtest-cli
    sudo curl -LSo /usr/local/bin/speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
    sudo chmod +x /usr/local/bin/speedtest-cli

    # Install latest version of LLVM/Clang
    curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
    echo "deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch main" | sudo tee -a /etc/apt/sources.list
    sudo apt update -qq
    sudo apt install -y --no-install-recommends \
        clang-9 \
        lld-9

    # Build updated ccache
    curl -LSs https://www.samba.org/ftp/ccache/ccache-"${CCACHE_VERSION:?}".tar.gz | tar -xzf -
    cd ccache-"${CCACHE_VERSION}" || { display_error "Downloading or extracting ccache failed!"; return 1; }
    ./configure
    make -j"$(nproc)"
    sudo make install
    cd "${OLDPWD}" || { display_error "${OLDPWD} doesn't exist??"; return 1; }
    rm -rf ccache*

    # Setup git
    git config --global core.editor vim
    git config --global user.name "Nathan Chancellor"
    git config --global user.email "natechancellor@gmail.com"

    # Install hub
    curl -LSsO https://github.com/github/hub/releases/download/v"${HUB_VERSION:?}"/hub-linux-${ARCH}-"${HUB_VERSION}".tgz
    tar -xf hub-linux-${ARCH}-"${HUB_VERSION}".tgz
    cd hub-linux-${ARCH}-"${HUB_VERSION}" || { display_error "Downloading or extracting hub failed!"; return 1; }
    sudo ./install
    cd "${OLDPWD}" || { display_error "${OLDPWD} doesn't exist??"; return 1; }
    rm -rf hub*

    # Install prebuilt ripgrep and fd binaries if available
    if [[ ${ARCH} = "amd64" ]]; then
        for URL in https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION:?}/bat_${BAT_VERSION}_amd64.deb \
                   https://github.com/sharkdp/fd/releases/download/v${FD_VERSION:?}/fd_${FD_VERSION}_amd64.deb \
                   https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION:?}/ripgrep_${RG_VERSION}_amd64.deb; do
            curl -LSsO "${URL}"
            sudo dpkg -i "$(basename "${URL}")" && rm "$(basename "${URL}")"
        done
    # Build them from source otherwise
    else
        # Install rust
        curl https://sh.rustup.rs -sSf | sh
        source "${HOME}"/.cargo/env

        for PAIR in fd:https://github.com/sharkdp/fd/archive/v${FD_VERSION:?}.zip \
                    ripgrep:https://github.com/BurntSushi/ripgrep/archive/${RG_VERSION:?}.zip; do
            BINARY=${PAIR%%:*}
            URL=${PAIR#*:}
            TMP=$(mktemp)

            curl -LSs "${URL}" -o "${TMP}"
            unzip "${TMP}"
            cd "${BINARY}"-* || { display_error "Downloading or extracting ${BINARY} failed!"; return 1; }
            cargo build --release
            cargo install
            cd "${OLDPWD}" || { display_error "${OLDPWD} doesn't exist??"; return 1; }
            rm -rf "${OLDPWD}" "${TMP}"
        done
    fi

    # Setup SSH and GPG if keys are present
    mkdir -p "${HOME}"/.ssh
    mv "${CROSTINI}"/id_ed25519{,.pub} "${HOME}"/.ssh
    chmod 600 "${HOME}"/.ssh/id_ed25519

    # Setup GPG
    gpg --import "${CROSTINI}"/{public*,private*}.asc
    gpg --import-ownertrust "${CROSTINI}"/ownertrust*.asc
    git config --global commit.gpgsign true
    git config --global user.signingkey 2437CB76E544CB6AB3D9DFD399739260CB6CB716
    {
        echo "default-cache-ttl 3600"
        echo "max-cache-ttl 86400"
    } > "${HOME}"/.gnupg/gpg-agent.conf
    gpg-connect-agent reloadagent /bye

    # Clone scripts
    git clone git@github.com:nathanchance/scripts "${HOME}"/scripts || return 1

    # Clone repos
    mkdir -p "${HOME}"/repos
    local DOTFILES; DOTFILES=${HOME}/repos/dotfiles
    git clone git@github.com:nathanchance/dotfiles "${DOTFILES}" || return 1

    # Copy files into their proper locations
    # tmux
    cp "${DOTFILES}"/pixelbook/.tmux.conf "${HOME}"

    # Run small setup scripts from dotfiles
    zsh "${DOTFILES}"/common/global_gitignore.sh
    zsh "${DOTFILES}"/common/vim/vim_setup.sh

    # Setup bash_aliases
    {
        echo
        echo "[[ -f \${HOME}/scripts/env/common ]] && source \"\${HOME}/scripts/env/common\""
        echo "type shell_setup &>/dev/null && shell_setup"
    } > "${HOME}"/.zshrc

    # Let her rip!
    source "${HOME}"/.zshrc
)}


# Laptop specific aliases
function crostini_aliases() {
    alias mshsvr='mosh nathan@${RYZEN_IP}'
}


# Setup PS1 and such
function crostini_prompt() {
    echo "$fpath" | rg -q -s --color=never "${HOME}/.zfunctions" || fpath=( "${HOME}/.zfunctions" $fpath ) 
    autoload -U promptinit
    promptinit
    prompt pure
}


# Laptop specific setup
function crostini_setup() {
    crostini_prompt
}
# vi: filetype=zsh
